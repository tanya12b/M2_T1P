#include <iostream>
#include <cstdlib>
#include <pthread.h>
#include <ctime>

using namespace std;

const int MAX_THREADS = 4; // Maximum number of threads

// Structure for passing arguments to thread function
struct ThreadArgs {
    int threadID;
    int** matrixA;
    int** matrixB;
    int** resultMatrix;
    int size;
};

// Function to perform matrix multiplication for a portion of the matrix
void* multiply(void* arg) {
    ThreadArgs* args = (ThreadArgs*)arg;
    int threadID = args->threadID;
    int** matrixA = args->matrixA;
    int** matrixB = args->matrixB;
    int** resultMatrix = args->resultMatrix;
    int size = args->size;

    int startRow = threadID * (size / MAX_THREADS);
    int endRow = (threadID + 1) * (size / MAX_THREADS);

    for (int i = startRow; i < endRow; ++i) {
        for (int j = 0; j < size; ++j) {
            resultMatrix[i][j] = 0;
            for (int k = 0; k < size; ++k) {
                resultMatrix[i][j] += matrixA[i][k] * matrixB[k][j];
            }
        }
    }

    pthread_exit(NULL);
}

// Function to perform matrix multiplication sequentially
void multiplySequential(int** matrixA, int** matrixB, int** resultMatrix, int size) {
    for (int i = 0; i < size; ++i) {
        for (int j = 0; j < size; ++j) {
            resultMatrix[i][j] = 0;
            for (int k = 0; k < size; ++k) {
                resultMatrix[i][j] += matrixA[i][k] * matrixB[k][j];
            }
        }
    }
}

// Function to print a matrix
void printMatrix(int** matrix, int size) {
    for (int i = 0; i < size; ++i) {
        for (int j = 0; j < size; ++j) {
            cout << matrix[i][j] << " ";
        }
        cout << endl;
    }
}

int main() {
    const int sizes[] = {700,100,1200,1500};//se larger matrix sizes
    const int numSizes = sizeof(sizes) / sizeof(int);

    for (int s = 0; s < numSizes; ++s) {
        int size = sizes[s];

        // Initialize matrices with random values
        int** matrixA = new int*[size];
        int** matrixB = new int*[size];
        int** resultMatrix = new int*[size];

        for (int i = 0; i < size; ++i) {
            matrixA[i] = new int[size];
            matrixB[i] = new int[size];
            resultMatrix[i] = new int[size];
            for (int j = 0; j < size; ++j) {
                matrixA[i][j] = rand() % 10;
                matrixB[i][j] = rand() % 10;
            }
        }

        cout << "SIZE = " << size << endl;

        // Sequential multiplication
        clock_t startTime = clock();
        multiplySequential(matrixA, matrixB, resultMatrix, size);
        clock_t endTime = clock();
        double sequentialTime = double(endTime - startTime) / CLOCKS_PER_SEC * 1000; // in milliseconds

        cout << "SEQUENTIAL: " << sequentialTime << " milliseconds" << endl;

        // Parallel multiplication for different thread counts
        for (int numThreads = 2; numThreads <= MAX_THREADS && numThreads <= size; ++numThreads) {
            pthread_t threads[MAX_THREADS];
            ThreadArgs args[MAX_THREADS];

            startTime = clock();
            for (int i = 0; i < numThreads; ++i) {
                args[i].threadID = i;
                args[i].matrixA = matrixA;
                args[i].matrixB = matrixB;
                args[i].resultMatrix = resultMatrix;
                args[i].size = size;
                pthread_create(&threads[i], NULL, multiply, (void*)&args[i]);
            }

            for (int i = 0; i < numThreads; ++i) {
                pthread_join(threads[i], NULL);
            }

            endTime = clock();
            double parallelTime = double(endTime - startTime) / CLOCKS_PER_SEC * 1000; // in milliseconds

            cout << "PARALLEL (threads: " << numThreads << "): " << parallelTime << " milliseconds" << endl;
        }

        // Deallocate memory
        for (int i = 0; i < size; ++i) {
            delete[] matrixA[i];
            delete[] matrixB[i];
            delete[] resultMatrix[i];
        }
        delete[] matrixA;
        delete[] matrixB;
        delete[] resultMatrix;

        cout << endl;
    }

    return 0;
}
